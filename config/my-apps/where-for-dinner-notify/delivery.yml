apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: where-for-dinner-notify
  annotations:
    ootb.apps.tanzu.vmware.com/servicebinding-workload: "true"
    ootb.apps.tanzu.vmware.com/apidescriptor-ref: "true"
    kapp.k14s.io/change-rule: upsert after upserting servicebinding.io/ServiceBindings
  labels:
    app.kubernetes.io/part-of: where-for-dinner-notify
    apps.tanzu.vmware.com/auto-configure-actuators: "true"
    apps.tanzu.vmware.com/has-tests: "true"
    apps.tanzu.vmware.com/workload-type: web
    networking.knative.dev/visibility: cluster-local
    app.kubernetes.io/component: run
    carto.run/workload-name: where-for-dinner-notify
spec:
  template:
    metadata:
      annotations:
        apps.tanzu.vmware.com/correlationid: https://github.com/dapdelivery/where-for-dinner-31-05-2024-15-12-01-831450457.git?sub_path=where-for-dinner-notify
        autoscaling.knative.dev/maxScale: "4"
        autoscaling.knative.dev/minScale: "1"
        autoscaling.knative.dev/target: "200"
        boot.spring.io/actuator: http://:8081/actuator
        boot.spring.io/version: 3.0.2
        conventions.carto.run/applied-conventions: |-
          appliveview-sample/app-live-view-appflavour-check
          spring-boot-convention/auto-configure-actuators-check
          spring-boot-convention/spring-boot
          spring-boot-convention/spring-boot-web
          spring-boot-convention/spring-boot-actuator
          spring-boot-convention/spring-boot-actuator-probes
          spring-boot-convention/app-live-view-appflavour-check
          spring-boot-convention/app-live-view-connector-boot
          spring-boot-convention/app-live-view-appflavours-boot
        developer.conventions/target-containers: workload
        kubectl.kubernetes.io/last-applied-configuration: |
          {"apiVersion":"carto.run/v1alpha1","kind":"Workload","metadata":{"annotations":{},"labels":{"app.kubernetes.io/part-of":"where-for-dinner-notify","apps.tanzu.vmware.com/auto-configure-actuators":"true","apps.tanzu.vmware.com/has-tests":"true","apps.tanzu.vmware.com/workload-type":"web","networking.knative.dev/visibility":"cluster-local"},"name":"where-for-dinner-notify","namespace":"my-apps"},"spec":{"build":{"env":[{"name":"BP_MAVEN_BUILD_ARGUMENTS","value":"-P native -Dmaven.test.skip=true --no-transfer-progress package"},{"name":"BP_JVM_VERSION","value":"17"}]},"params":[{"name":"gitops_repository","value":"https://github.com/dapdelivery/where-for-dinner-dest-31-05-2024-15-12-01-831450457.git"},{"name":"gitops_repository_name","value":"where-for-dinner-dest-31-05-2024-15-12-01-831450457"},{"name":"annotations","value":{"autoscaling.knative.dev/maxScale":"4","autoscaling.knative.dev/minScale":"1","autoscaling.knative.dev/target":"200"}}],"serviceClaims":[{"name":"rmq","ref":{"apiVersion":"services.apps.tanzu.vmware.com/v1alpha1","kind":"ResourceClaim","name":"rmq-where-for-dinner"}}],"source":{"git":{"ref":{"branch":"main"},"url":"https://github.com/dapdelivery/where-for-dinner-31-05-2024-15-12-01-831450457.git"},"subPath":"where-for-dinner-notify"}}}
      labels:
        app.kubernetes.io/component: run
        app.kubernetes.io/part-of: where-for-dinner-notify
        apps.tanzu.vmware.com/auto-configure-actuators: "true"
        apps.tanzu.vmware.com/has-tests: "true"
        apps.tanzu.vmware.com/workload-type: web
        carto.run/workload-name: where-for-dinner-notify
        conventions.carto.run/framework: spring-boot
        networking.knative.dev/visibility: cluster-local
        tanzu.app.live.view: "true"
        tanzu.app.live.view.application.actuator.path: actuator
        tanzu.app.live.view.application.actuator.port: "8081"
        tanzu.app.live.view.application.flavours: spring-boot
        tanzu.app.live.view.application.name: where-for-dinner-notify
    spec:
      containers:
      - env:
        - name: JAVA_TOOL_OPTIONS
          value: -Dmanagement.endpoint.health.probes.add-additional-paths="true" -Dmanagement.endpoint.health.show-details="always" -Dmanagement.endpoints.web.base-path="/actuator" -Dmanagement.endpoints.web.exposure.include="*" -Dmanagement.health.probes.enabled="true" -Dmanagement.server.port="8081" -Dserver.port="8080"
        image: gcr.io/tap-ci/ci-pipeline/apps-31-05-2024-15-12-01-831450457/where-for-dinner-notify-my-apps@sha256:7e46b5d18595f7dfcddb838bcce64560235fb109333c0f68c27d2776c3681d5d
        livenessProbe:
          httpGet:
            path: /livez
            port: 8080
            scheme: HTTP
        name: workload
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
            scheme: HTTP
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        startupProbe:
          httpGet:
            path: /readyz
            port: 8080
            scheme: HTTP
      serviceAccountName: default

